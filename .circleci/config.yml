version: 2.1

executors:
  ros_cli:
    docker:
      - image: railsonservices/cli
        entrypoint: /bin/bash -l
    working_directory: ~/project
    shell: /bin/bash --login -eo pipefail

commands:
  docker_login:
    description: Login to dockerhub
    steps:
      - run:
          name: Login to dockerhub
          command: echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USER} --password-stdin

  build_test_push:
    executor: ros_cli
    parallelism: 4
    environment:
      ROS_ENV: test
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - checkout
      - docker_login
      - run:
          name: Generate the platform environment
          command: ros be init -v
      - run:
          name: Generate the application services and platform templates
          command: ros generate:be:application
      - run:
          name: Select platform services
          command: |
            echo "export PLATFORM_SERVICES=($(ros be ls platform --enabled | circleci tests split))" >> $BASH_ENV
      - run:
          name: Build, Test and Run
          command: |
            echo "Selected services: ${PLATFORM_SERVICES[@]}"
            ros be test -v --build --fail-fast --push ${PLATFORM_SERVICES[@]}

  integration_tests_and_publish_api_docs:
    executor: ros_cli
    environment:
      ROS_ENV: test
      # ROS_ENV: development
      # ROS_PROFILE: stage
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - checkout
      - docker_login
      - run:
          name: Generate the platform environment
          command: ros be init -v
      - run:
          name: Generate the application services and platform templates
          command: ros generate:be:application
      - run:
          name: Pull docker images
          command: |
            ros be pull -v $(ros be ls platform --enabled)
      - run:
          # without running all services, the publish won't work
          name: Up all services
          command: |
            ros be up -d -v
      # - run:
      #     name: Run integration tests
      #     command: |
      #       ros be test -v --integration
      - run:
          name: Publish API Documentation
          command: |
            ros be publish postman -v

  deploy:
    executor: ros_cli
    parallelism: 4
    parameters:
      ros_env:
        type: string
        default: production
        description: The value for env ROS_ENV
      ros_profile:
        type: string
        description: The value for env ROS_PROFILE
      aws_iam_role:
        type: string
        description: The IAM role to connect to EKS cluster
    environment:
      # NOTE: The ROS_ENV var determines into which cluster the application is deployed
      ROS_ENV: << parameters.ros_env >>
      ROS_PROFILE: << parameters.ros_profile >>
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - checkout
      - docker_login
      - run:
          name: Initialize EKS authenticator and generate kubeconfig
          command: ros be infra init --role-name << parameters.aws_iam_role >>
      - run:
          name: Generate the platform environment
          command: ros be init -v
      - run:
          name: Generate the application services and platform templates
          command: ros generate:be:application
      - run:
          name: Select platform services to Deploy
          command: |
            echo "export PLATFORM_SERVICES=($(ros be ls platform --enabled | circleci tests split))" >> $BASH_ENV
      - run:
          name: Deploy services
          command: |
            echo "Deploy services: ${PLATFORM_SERVICES[@]}"
            if [ "${CIRCLE_NODE_INDEX}" == "0" ]; then
              echo "ros be up -v ${PLATFORM_SERVICES[@]}"
              ros be up -v ${PLATFORM_SERVICES[@]}
            else
              echo "ros be up -v --skip-infra ${PLATFORM_SERVICES[@]}"
              ros be up -v --skip-infra ${PLATFORM_SERVICES[@]}
            fi

workflows:
  test_workflow:
    jobs:
      - build_test_and_push:
          name: test_development_images
